import React from 'react';
import { AbsoluteFill, interpolate, useCurrentFrame, useVideoConfig } from 'remotion';
import { Highlight, themes } from 'prism-react-renderer';

interface TypingCodeProps {
  code: string;
  language?: string;
  title?: string;
  startFrame: number;
  durationInFrames: number;
  variant?: string;
  cursor_style?: string;
  typing_speed?: number;
  show_line_numbers?: boolean;
}

export const TypingCode: React.FC<TypingCodeProps> = ({
  code,
  language = 'javascript',
  title,
  startFrame,
  durationInFrames,
  variant = 'editor',
  cursor_style = 'line',
  typing_speed = 1.5,
  show_line_numbers = true
}) => {
  const frame = useCurrentFrame();
  const { fps } = useVideoConfig();
  const relativeFrame = frame - startFrame;

  // Don't render if outside the time range
  if (frame < startFrame || frame >= startFrame + durationInFrames) {
    return null;
  }

  // Typing speed configuration
  const charsPerFrame = typing_speed;
  const totalChars = code.length;

  // Calculate how many characters to show
  const startDelay = 10;
  const charsToShow = Math.min(
    totalChars,
    Math.floor(Math.max(0, relativeFrame - startDelay) * charsPerFrame)
  );

  // Get the displayed code
  const displayedCode = code.slice(0, charsToShow);
  const isTypingComplete = charsToShow >= totalChars;

  // Cursor blinking
  const cursorBlinkSpeed = 30;
  const showCursor = !isTypingComplete && Math.floor(relativeFrame / (cursorBlinkSpeed / 2)) % 2 === 0;

  // Variant styles
  const variants = {
    minimal: {
      background: 'rgba(30, 35, 50, 0.95)',
      borderRadius: 12,
      border: 'none',
      padding: 30,
      boxShadow: '0 10px 40px rgba(0, 0, 0, 0.3)'
    },
    terminal: {
      background: 'rgba(20, 20, 20, 0.98)',
      borderRadius: 8,
      border: '1px solid rgba(255, 255, 255, 0.1)',
      padding: 30,
      boxShadow: '0 10px 40px rgba(0, 0, 0, 0.5)'
    },
    editor: {
      background: 'rgba(26, 31, 46, 0.98)',
      borderRadius: 12,
      border: '1px solid rgba(255, 255, 255, 0.05)',
      padding: 0,
      boxShadow: '0 20px 60px rgba(0, 0, 0, 0.4)'
    },
    hacker: {
      background: 'rgba(0, 0, 0, 0.95)',
      borderRadius: 8,
      border: '1px solid #00D9FF',
      padding: 30,
      boxShadow: '0 0 30px rgba(0, 217, 255, 0.4)'
    }
  };

  const variantStyle = variants[variant as keyof typeof variants] || variants.editor;

  // Cursor styles
  const cursorStyles = {
    block: {
      display: 'inline-block',
      width: '0.6em',
      height: '1.2em',
      background: '#00D9FF',
      marginLeft: 2
    },
    line: {
      display: 'inline-block',
      width: 2,
      height: '1.2em',
      background: '#00D9FF',
      marginLeft: 2
    },
    underline: {
      display: 'inline-block',
      width: '0.6em',
      height: 2,
      background: '#00D9FF',
      marginLeft: 2,
      verticalAlign: 'bottom'
    },
    none: {
      display: 'none'
    }
  };

  const cursorStyle = cursorStyles[cursor_style as keyof typeof cursorStyles] || cursorStyles.line;

  return (
    <div
      style={{
        width: '100%',
        height: '100%',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontFamily: "'Fira Code', 'Monaco', 'Consolas', 'monospace'"
      }}
    >
      <Highlight
        theme={themes.vsDark}
        code={displayedCode}
        language={language as any}
      >
        {({ className, style, tokens, getLineProps, getTokenProps }) => (
          <div style={variantStyle}>
            {title && variant === 'editor' ? (
              <>
                <div
                  style={{
                    background: 'rgba(0, 0, 0, 0.3)',
                    padding: '12px 20px',
                    borderTopLeftRadius: 12,
                    borderTopRightRadius: 12,
                    borderBottom: '1px solid rgba(255, 255, 255, 0.05)',
                    display: 'flex',
                    alignItems: 'center',
                    gap: 8
                  }}
                >
                  <div style={{ display: 'flex', gap: 6 }}>
                    <div style={{ width: 12, height: 12, borderRadius: '50%', background: '#FF5F56' }} />
                    <div style={{ width: 12, height: 12, borderRadius: '50%', background: '#FFBD2E' }} />
                    <div style={{ width: 12, height: 12, borderRadius: '50%', background: '#27C93F' }} />
                  </div>
                  <div
                    style={{
                      fontSize: 14,
                      color: 'rgba(255, 255, 255, 0.7)',
                      marginLeft: 12,
                      fontFamily: "'Inter', 'SF Pro Display', 'system-ui', 'sans-serif'"
                    }}
                  >
                    {title}
                  </div>
                </div>
                <div style={{ padding: 30 }}>
                  <div style={{ display: 'flex', gap: 20 }}>
                    {show_line_numbers && (
                      <div
                        style={{
                          color: 'rgba(255, 255, 255, 0.3)',
                          fontSize: 16,
                          lineHeight: 1.8,
                          textAlign: 'right',
                          userSelect: 'none',
                          minWidth: 50
                        }}
                      >
                        {tokens.map((_, idx) => (
                          <div key={idx}>{idx + 1}</div>
                        ))}
                      </div>
                    )}
                    <div
                      style={{
                        flex: 1,
                        fontSize: 18,
                        lineHeight: 1.8,
                        overflow: 'auto',
                        whiteSpace: 'pre'
                      }}
                    >
                      {tokens.map((line, i) => (
                        <div key={i} {...getLineProps({ line })} style={{ display: 'flex', alignItems: 'center' }}>
                          {line.map((token, key) => (
                            <span key={key} {...getTokenProps({ token })} />
                          ))}
                          {i === tokens.length - 1 && showCursor && cursor_style !== 'none' && (
                            <span style={cursorStyle}></span>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </>
            ) : (
              <div style={{ padding: variant === 'editor' ? 30 : 0 }}>
                {title && variant !== 'editor' && (
                  <div
                    style={{
                      fontSize: 24,
                      fontWeight: 600,
                      color: '#FFFFFF',
                      marginBottom: 20,
                      fontFamily: "'Inter', 'SF Pro Display', 'system-ui', 'sans-serif'"
                    }}
                  >
                    {title}
                  </div>
                )}
                <div style={{ display: 'flex', gap: 20 }}>
                  {show_line_numbers && (
                    <div
                      style={{
                        color: 'rgba(255, 255, 255, 0.3)',
                        fontSize: 16,
                        lineHeight: 1.8,
                        textAlign: 'right',
                        userSelect: 'none',
                        minWidth: 50
                      }}
                    >
                      {tokens.map((_, idx) => (
                        <div key={idx}>{idx + 1}</div>
                      ))}
                    </div>
                  )}
                  <div
                    style={{
                      flex: 1,
                      fontSize: 18,
                      lineHeight: 1.8,
                      overflow: 'auto',
                      whiteSpace: 'pre'
                    }}
                  >
                    {tokens.map((line, i) => (
                      <div key={i} {...getLineProps({ line })} style={{ display: 'flex', alignItems: 'center' }}>
                        {line.map((token, key) => (
                          <span key={key} {...getTokenProps({ token })} />
                        ))}
                        {i === tokens.length - 1 && showCursor && cursor_style !== 'none' && (
                          <span style={cursorStyle}></span>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </Highlight>
    </div>
  );
};
